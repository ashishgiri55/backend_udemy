{"version":3,"sources":["shared/components/UIElements/Card.js","shared/components/UIElements/Map.js","places/Components/PlaceItem.js","places/Components/PlaceList.js","places/pages/UserPlaces.js"],"names":["Card","props","className","style","children","Map","mapRef","useRef","center","zoom","useEffect","map","window","google","maps","current","Marker","position","ref","PlaceItem","useHttpClient","isLoading","error","sendRequest","clearError","auth","useContext","AuthContext","useState","showMap","setShowMap","showConfirmModal","setShowConfirmModal","closeMapHandler","cancelDeleteHandler","confirmDeleteHandler","a","process","id","Authorization","token","onDelete","Fragment","ErrorModal","onClear","Modal","show","onCancel","header","address","contentClass","footerClass","footer","Button","onClick","coordinates","inverse","danger","LoadingSpinner","asOverlay","src","image","alt","title","description","userId","creatorId","to","PlaceList","items","length","place","key","creator","location","onDeletePlace","UserPlaces","loadedPlaces","setLoadedPlaces","useParams","responseData","places","fetchPlaces","deletedPlaceId","prevPlaces","filter"],"mappings":"qGAAA,0BAYeA,IARF,SAAAC,GACX,OACE,yBAAKC,UAAS,eAAUD,EAAMC,WAAaC,MAAOF,EAAME,OACrDF,EAAMG,Y,+MCoBEC,G,MAvBH,SAAAJ,GACV,IAAMK,EAASC,mBAEPC,EAAiBP,EAAjBO,OAAQC,EAASR,EAATQ,KAWhB,OATAC,qBAAU,WACR,IAAMC,EAAM,IAAIC,OAAOC,OAAOC,KAAKT,IAAIC,EAAOS,QAAS,CACrDP,OAAQA,EACRC,KAAMA,IAGR,IAAIG,OAAOC,OAAOC,KAAKE,OAAO,CAAEC,SAAUT,EAAQG,IAAKA,MACtD,CAACH,EAAQC,IAGV,yBACES,IAAKZ,EACLJ,UAAS,cAASD,EAAMC,WACxBC,MAAOF,EAAME,U,gCC6FJgB,G,MAvGG,SAAAlB,GAAU,IAAD,EAC6BmB,cAA9CC,EADiB,EACjBA,UAAWC,EADM,EACNA,MAAOC,EADD,EACCA,YAAaC,EADd,EACcA,WACjCC,EAAOC,qBAAWC,KAFC,EAGKC,oBAAS,GAHd,mBAGlBC,EAHkB,KAGTC,EAHS,OAIuBF,oBAAS,GAJhC,mBAIlBG,EAJkB,KAIAC,EAJA,KAQnBC,EAAkB,kBAAMH,GAAW,IAMnCI,EAAsB,WAC1BF,GAAoB,IAGhBG,EAAoB,uCAAG,sBAAAC,EAAA,6DAC3BJ,GAAoB,GADO,kBAGnBT,EACLc,4BAAA,kBAA+CpC,EAAMqC,IACpD,SACA,KACA,CACEC,cAAe,UAAYd,EAAKe,QARX,OAWzBvC,EAAMwC,SAASxC,EAAMqC,IAXI,uGAAH,qDAe1B,OACE,kBAAC,IAAMI,SAAP,KACE,kBAACC,EAAA,EAAD,CAAYrB,MAAOA,EAAOsB,QAASpB,IACnC,kBAACqB,EAAA,EAAD,CACEC,KAAMjB,EACNkB,SAAUd,EACVe,OAAQ/C,EAAMgD,QACdC,aAAa,4BACbC,YAAY,4BACZC,OAAQ,kBAACC,EAAA,EAAD,CAAQC,QAASrB,GAAjB,UAER,yBAAK/B,UAAU,iBACb,kBAAC,EAAD,CAAKM,OAAQP,EAAMsD,YAAa9C,KAAM,OAG1C,kBAACoC,EAAA,EAAD,CACEC,KAAMf,EACNgB,SAAUb,EACVc,OAAO,gBACPG,YAAY,4BACZC,OACE,kBAAC,IAAMV,SAAP,KACE,kBAACW,EAAA,EAAD,CAAQG,SAAO,EAACF,QAASpB,GAAzB,UAGA,kBAACmB,EAAA,EAAD,CAAQI,QAAM,EAACH,QAASnB,GAAxB,YAMJ,6HAKF,wBAAIjC,UAAU,cACZ,kBAACF,EAAA,EAAD,CAAME,UAAU,uBACbmB,GAAa,kBAACqC,EAAA,EAAD,CAAgBC,WAAS,IACvC,yBAAKzD,UAAU,qBACb,yBACE0D,IAAG,UAAKvB,wBAAL,YAAwCpC,EAAM4D,OACjDC,IAAK7D,EAAM8D,SAGf,yBAAK7D,UAAU,oBACb,4BAAKD,EAAM8D,OACX,4BAAK9D,EAAMgD,SACX,2BAAIhD,EAAM+D,cAEZ,yBAAK9D,UAAU,uBACb,kBAACmD,EAAA,EAAD,CAAQG,SAAO,EAACF,QA9EH,kBAAMxB,GAAW,KA8E9B,eAGCL,EAAKwC,SAAWhE,EAAMiE,WACrB,kBAACb,EAAA,EAAD,CAAQc,GAAE,kBAAalE,EAAMqC,KAA7B,QAGDb,EAAKwC,SAAWhE,EAAMiE,WACrB,kBAACb,EAAA,EAAD,CAAQI,QAAM,EAACH,QAlFM,WAC/BtB,GAAoB,KAiFV,gBClECoC,G,MA/BG,SAAAnE,GAChB,OAA2B,IAAvBA,EAAMoE,MAAMC,OAEZ,yBAAKpE,UAAU,qBACb,kBAACF,EAAA,EAAD,KACE,kEACA,kBAACqD,EAAA,EAAD,CAAQc,GAAG,eAAX,iBAON,wBAAIjE,UAAU,cACXD,EAAMoE,MAAM1D,KAAI,SAAA4D,GAAK,OACpB,kBAAC,EAAD,CACEC,IAAKD,EAAMjC,GACXA,GAAIiC,EAAMjC,GACVuB,MAAOU,EAAMV,MACbE,MAAOQ,EAAMR,MACbC,YAAaO,EAAMP,YACnBf,QAASsB,EAAMtB,QACfiB,UAAWK,EAAME,QACjBlB,YAAagB,EAAMG,SACnBjC,SAAUxC,EAAM0E,sBCgBXC,UAvCI,WAAO,IAAD,EACiBhD,qBADjB,mBAChBiD,EADgB,KACFC,EADE,OAE+B1D,cAA9CC,EAFe,EAEfA,UAAWC,EAFI,EAEJA,MAAOC,EAFH,EAEGA,YAAaC,EAFhB,EAEgBA,WAEjCyC,EAASc,cAAYd,OAE3BvD,qBAAU,YACS,uCAAG,4BAAA0B,EAAA,+EAEWb,EAAY,GAAD,OACjCc,4BADiC,wBACgB4B,IAHtC,OAEVe,EAFU,OAKhBF,EAAgBE,EAAaC,QALb,uGAAH,qDAQjBC,KACC,CAAC3D,EAAa0C,IAQjB,OACE,kBAAC,WAAD,KACE,kBAACtB,EAAA,EAAD,CAAYrB,MAAOA,EAAOsB,QAASpB,IAClCH,GACC,yBAAKnB,UAAU,UACb,kBAACwD,EAAA,EAAD,QAGFrC,GAAawD,GACb,kBAAC,EAAD,CAAWR,MAAOQ,EAAcF,cAfV,SAACQ,GAC3BL,GAAgB,SAACM,GAAD,OACdA,EAAWC,QAAO,SAACd,GAAD,OAAWA,EAAMjC,KAAO6C","file":"static/js/7.6eaa803a.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useRef, useEffect } from 'react';\r\n\r\nimport './Map.css';\r\n\r\nconst Map = props => {\r\n  const mapRef = useRef();\r\n  \r\n  const { center, zoom } = props;\r\n\r\n  useEffect(() => {\r\n    const map = new window.google.maps.Map(mapRef.current, {\r\n      center: center,\r\n      zoom: zoom\r\n    });\r\n  \r\n    new window.google.maps.Marker({ position: center, map: map });\r\n  }, [center, zoom]);  \r\n\r\n  return (\r\n    <div\r\n      ref={mapRef}\r\n      className={`map ${props.className}`}\r\n      style={props.style}\r\n    ></div>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n","import React, { useState, useContext } from 'react';\n\nimport Card from '../../shared/components/UIElements/Card';\nimport Button from '../../shared/components/FormElements/Button';\nimport Modal from '../../shared/components/UIElements/Modal';\nimport Map from '../../shared/components/UIElements/Map';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport './PlaceItem.css';\n\nconst PlaceItem = props => {\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const auth = useContext(AuthContext);\n  const [showMap, setShowMap] = useState(false);\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n\n  const openMapHandler = () => setShowMap(true);\n\n  const closeMapHandler = () => setShowMap(false);\n\n  const showDeleteWarningHandler = () => {\n    setShowConfirmModal(true);\n  };\n\n  const cancelDeleteHandler = () => {\n    setShowConfirmModal(false);\n  };\n\n  const confirmDeleteHandler = async () => {\n    setShowConfirmModal(false);\n    try {\n      await sendRequest(\n       process.env.REACT_APP_BACKEND_URL + `/places/${props.id}`,\n        'DELETE',\n        null,\n        {\n          Authorization: 'Bearer ' + auth.token\n        }\n      );\n      props.onDelete(props.id);\n    } catch (err) {}\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      <Modal\n        show={showMap}\n        onCancel={closeMapHandler}\n        header={props.address}\n        contentClass=\"place-item__modal-content\"\n        footerClass=\"place-item__modal-actions\"\n        footer={<Button onClick={closeMapHandler}>CLOSE</Button>}\n      >\n        <div className=\"map-container\">\n          <Map center={props.coordinates} zoom={16} />\n        </div>\n      </Modal>\n      <Modal\n        show={showConfirmModal}\n        onCancel={cancelDeleteHandler}\n        header=\"Are you sure?\"\n        footerClass=\"place-item__modal-actions\"\n        footer={\n          <React.Fragment>\n            <Button inverse onClick={cancelDeleteHandler}>\n              CANCEL\n            </Button>\n            <Button danger onClick={confirmDeleteHandler}>\n              DELETE\n            </Button>\n          </React.Fragment>\n        }\n      >\n        <p>\n          Do you want to proceed and delete this place? Please note that it\n          can't be undone thereafter.\n        </p>\n      </Modal>\n      <li className=\"place-item\">\n        <Card className=\"place-item__content\">\n          {isLoading && <LoadingSpinner asOverlay />}\n          <div className=\"place-item__image\">\n            <img\n              src={`${process.env.REACT_APP_ASSET_URL}/${props.image}`}\n              alt={props.title}\n            />\n          </div>\n          <div className=\"place-item__info\">\n            <h2>{props.title}</h2>\n            <h3>{props.address}</h3>\n            <p>{props.description}</p>\n          </div>\n          <div className=\"place-item__actions\">\n            <Button inverse onClick={openMapHandler}>\n              VIEW ON MAP\n            </Button>\n            {auth.userId === props.creatorId && (\n              <Button to={`/places/${props.id}`}>EDIT</Button>\n            )}\n\n            {auth.userId === props.creatorId && (\n              <Button danger onClick={showDeleteWarningHandler}>\n                DELETE\n              </Button>\n            )}\n          </div>\n        </Card>\n      </li>\n    </React.Fragment>\n  );\n};\n\nexport default PlaceItem;\n","import React from 'react';\r\n\r\nimport Card from '../../shared/components/UIElements/Card';\r\nimport PlaceItem from './PlaceItem';\r\nimport Button from '../../shared/components/FormElements/Button';\r\nimport './PlaceList.css';\r\n\r\nconst PlaceList = props => {\r\n  if (props.items.length === 0) {\r\n    return (\r\n      <div className=\"place-list center\">\r\n        <Card>\r\n          <h2>No places found. Maybe create one?</h2>\r\n          <Button to=\"/places/new\">Share Place</Button>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <ul className=\"place-list\">\r\n      {props.items.map(place => (\r\n        <PlaceItem\r\n          key={place.id}\r\n          id={place.id}\r\n          image={place.image}\r\n          title={place.title}\r\n          description={place.description}\r\n          address={place.address}\r\n          creatorId={place.creator}\r\n          coordinates={place.location}\r\n          onDelete={props.onDeletePlace}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default PlaceList;\r\n","import React, { useEffect, useState, Fragment } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport PlaceList from '../Components/PlaceList';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\n\nconst UserPlaces = () => {\n  const [loadedPlaces, setLoadedPlaces] = useState();\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const userId = useParams().userId;\n\n  useEffect(() => {\n    const fetchPlaces = async () => {\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/places/user/${userId}`\n        );\n        setLoadedPlaces(responseData.places);\n      } catch (err) {}\n    };\n    fetchPlaces();\n  }, [sendRequest, userId]);\n\n  const placeDeletedHandler = (deletedPlaceId) => {\n    setLoadedPlaces((prevPlaces) =>\n      prevPlaces.filter((place) => place.id !== deletedPlaceId)\n    );\n  };\n\n  return (\n    <Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {isLoading && (\n        <div className=\"center\">\n          <LoadingSpinner />\n        </div>\n      )}\n      {!isLoading && loadedPlaces && (\n        <PlaceList items={loadedPlaces} onDeletePlace={placeDeletedHandler} />\n      )}\n    </Fragment>\n  );\n};\n\nexport default UserPlaces;\n"],"sourceRoot":""}